# -*- coding: utf-8 -*-
import argparse
import numpy as np

def model_argparser():
    parser = argparse.ArgumentParser(description='train a video classification model')
    parser.add_argument('--width', type=int, default=224,help='image width')
    parser.add_argument('--height', type=int, default=224,help='image height')
    parser.add_argument('--network-json',type=str,help='network symbol file')
    parser.add_argument('--params', type=str,help='pretrained params')
    parser.add_argument('--lr',type=float,default=0.001,help='the initial learning rate')
    parser.add_argument('--wd',type=float,default=0.0005,help='weight decay')
    parser.add_argument('--optimizer', type=str, default='sgd',help='optimizer')
    parser.add_argument('--momentum', type=float, default=0.9,help='momentum for sgd')
    parser.add_argument('--lr-factor-step',type=int, default=1, help='the number of epoch to factor the lr, must be larger than 1')
    parser.add_argument('--lr-factor', type=float, default=0.1,help='times the lr with a factor for every lr-factor-step epoch')
    parser.add_argument('--clip-gradient', type=float, default=40.,help='clip min/max gradient to prevent extreme value')
    parser.add_argument('--begin-epoch', type=int, default=0,help='begin epoch')
    parser.add_argument('--num-epochs', type=int, default=100,help='the number of training epochs')
    parser.add_argument('--gpus', type=str, default='0',help='the gpus will be used, e.g "0,1,2,3""')
    parser.add_argument('--display-step', type=int, default=5,help='display step')
    parser.add_argument('--frame-per-video', type=int, default=3,help='frame per video')
    parser.add_argument('--batch-size', type=int, default=1,help='the batch size(video per batch)')
    parser.add_argument('--save-model-prefix', type=str,help='the prefix of the model to save')
    parser.add_argument('--train-rec-dir', type=str, required=True,help='train rec dir')
    parser.add_argument('--val-rec-dir', type=str,help='val rec dir ')
    #parser.add_argument('--phase',type=str,required=True,choices=['Train','Test'],help='the phase of data')
    parser.add_argument('--is-flow',type=lambda x: x.lower() in ("yes", 'true', 't', '1'), default='False',help='the type pf image')
    parser.add_argument('--shuffle', type=lambda x: x.lower() in ("yes", 'true', 't', '1'), default='False',help='shuffle the data')
    parser.add_argument('--resize',type=int,default=0,help='resize the image size')
    parser.add_argument('--rand-crop',type=lambda x: x.lower() in ("yes", 'true', 't', '1'), default='False')
    parser.add_argument('--rand-resize',type=lambda x: x.lower() in ("yes", 'true', 't', '1'), default='False')
    parser.add_argument('--rand-mirror',type=lambda x: x.lower() in ("yes", 'true', 't', '1'), default='False')
    parser.add_argument('--mean',type = np.array,default=np.array([[104, 117, 123]]).astype('uint8'))
    parser.add_argument('--std',type = np.array,default=np.array([1, 1, 1]).astype('uint8'))
    parser.add_argument('--num-workers', type=int, default=0,help='number of io workers')
    parser.add_argument('--log', type=str,help='the name of log file')
    return parser.parse_args()
